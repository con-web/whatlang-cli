name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true

permissions:
  contents: write
  actions: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Cargo.toml
            Cargo.lock
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          body: |
            Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set output
        id: set_output
        run: echo "::set-output name=upload_url::$(echo ${{ steps.create_release.outputs.upload_url }})"
  build_and_upload_release_asset:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: Install aarch64-linux-gnu-gcc
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Zip binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: | 
          zip -j "whatlang-cli-${{ github.event.inputs.version }}-${{ matrix.target }}.zip" "./target/${{ matrix.target }}/release/whatlang-cli"
      - name: Zip binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path "./target/${{ matrix.target }}/release/whatlang-cli.exe" -DestinationPath "whatlang-cli-${{ github.event.inputs.version }}-${{ matrix.target }}.zip"

      - name: Upload Release Asset (Zipped)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./whatlang-cli-${{ github.event.inputs.version }}-${{ matrix.target }}.zip
          asset_name: whatlang-cli-${{ github.event.inputs.version }}-${{ matrix.target }}.zip
          asset_content_type: application/zip
